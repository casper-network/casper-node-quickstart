---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates a single instance Autoscaling Group running a
  Casper Node.

Parameters:

  Identifier:
    Type: String
    Description: A name identifier for the resources

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the instance should be deployed to

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Choose which subnets the nodes should be deployed to

  InstanceType:
    Type: String
    Default: r5.large
    Description: Instance type for the nodes

  EbsVolumeSize:
    Type: Number
    Default: 250
    Description: Size of the EBS volume of the instances in GB

  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
    Description: Parameter Store path for the AMI Id

  KeyName:
    Type: String
    Default: ''
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Leave blank to disable SSH access.

  IpWhitelist:
    Type: String
    Default: ''
    Description: IP to allow SSH access to the node. Used only if SSH access is enabled.

  #  ############## Service #############

  CasperNetwork:
    Type: String
    Description: Name of the Casper network to join (e.g casper, casper-test)

  TrustedHashIp:
    Type: String
    Description: IP used to obtain the trusted hash

  CustomInitScript:
    Type: String
    Default: ''
    Description: A custom script to execute before the node initialization.

  #  ############### Tags ###############

  OwnerName:
    Type: String
    Description: An arbitrary tag name for the owner of these resources

  ProjectName:
    Type: String
    Description: The name of the project to which these resources belong

  Environment:
    Type: String
    Description: Environment name to append to resources names and tags
      
Conditions:

  Never: !Equals [ true, false ]

  EnableSSH: !Not [ !Equals [ !Ref KeyName, '' ] ]

Resources:

  NullResource:
    Type: Custom::NullResource
    Condition: Never

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${Identifier}-${AWS::Region}-node
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
        - Effect: Allow
          Principal: 
            Service: 
            - ec2.amazonaws.com
          Action: 
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole

  # ########## Security Groups #########

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub ${Identifier}-node
      GroupDescription: !Sub Security group for ${Identifier} nodes
      SecurityGroupIngress:
      - !If [ EnableSSH, { IpProtocol: tcp, CidrIp: !Ref IpWhitelist, FromPort: 22, ToPort: 22 }, !Ref 'AWS::NoValue' ] 
      - { IpProtocol: tcp, CidrIp: "0.0.0.0/0", FromPort: 7777, ToPort: 7777 }
      - { IpProtocol: tcp, CidrIp: "0.0.0.0/0", FromPort: 8888, ToPort: 8888 }
      - { IpProtocol: tcp, CidrIp: "0.0.0.0/0", FromPort: 9999, ToPort: 9999 }
      - { IpProtocol: tcp, CidrIp: "0.0.0.0/0", FromPort: 35000, ToPort: 35000 }
      SecurityGroupEgress:
      - { IpProtocol: -1, CidrIp: "0.0.0.0/0" }
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-node
      - Key: Owner
        Value: !Ref OwnerName
      - Key: ProjectName
        Value: !Ref ProjectName
      - Key: Environment
        Value: !Ref Environment

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /${Identifier}
      RetentionInDays: 3

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${Identifier}-node
      LaunchTemplateData:
        ImageId: !Ref AmiId
        KeyName: !If [ EnableSSH, !Ref KeyName, !Ref 'AWS::NoValue' ]
        InstanceType: !Ref InstanceType
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref EbsVolumeSize
        SecurityGroupIds: 
        - !Ref SecurityGroup
        IamInstanceProfile: 
          Arn: !GetAtt InstanceProfile.Arn
        Monitoring: 
          Enabled: true
        TagSpecifications: 
        - ResourceType: instance
          Tags: 
          - Key: Name
            Value: !Sub ${Identifier}-node
          - Key: Owner
            Value: !Ref OwnerName
          - Key: ProjectName
            Value: !Ref ProjectName
          - Key: Environment
            Value: !Ref Environment
          - Key: Datadog
            Value: false
        UserData:
          Fn::Base64: !Sub |
            #cloud-config
            repo_update: true
            repo_upgrade: all

            packages:
            - dnsutils
            - jq
            - casper-node-launcher
            - casper-client

            apt:
              sources:
                casper:
                  source: "deb https://repo.casperlabs.io/releases bionic main"
                  key: |
                    -----BEGIN PGP PUBLIC KEY BLOCK-----

                    mQINBFyrstcBEADT14M6KRvZ2Rg4rTolR3cnN4dMBpfjWNJweRF8lJPUJtuSaS0o
                    ATPnOUWxj/d27WhVSO5EZFP3y2p/2hAiuuD8jRcr3gxwD6x1Bcl5BN9Z/GG9/lF2
                    TeciLEiHHqJYLmbSxsgcPXzQSd4u+hD606cw4Bwu2gt05xkWFsyk8TJIzbYcaIAK
                    FNJG6rq5XObwrL4vIFt1VCXqCq6VNJCHL5irRwT+JlhmNySe4Q5SJhkjdNIfITIb
                    YBi9p/ExrCl0D0ULsv2mVilZW1OzeuNxr5lWDltKS5zXiYRnsQdrhl+oMwbEoksg
                    pXB3VYLQkeAQz0M6lNMZramA3oP4ZZXzD65jcREaViX/rG5tbUVqKfcMdYlovKeh
                    CxUi3danFREMT2N8fkRzRG6sZFfOSPH+33Opb6AHjcB2/uSQPCwVxw4vr8r4ay90
                    JKEd1dx5+Q36AYEm6QFX9o27GtEUJiEhOcQjRvKzkEgGW8fJgAJWRc+P6zq55n3l
                    2wCMAXLRrK9PvhFLCaJ6QTkQmtw+2y9p8zTVcNgAzkmki7zatpcoTO4IZyjnGK8v
                    h7wzs7ZDFp2FQaE+ipZAPoZEVuqE4Y7bbSqgXQVwbziEXSYPBnfmsZJOHKvwrFyE
                    ebwLctK8fYd1oPXOLY/Zx4nGn0KrQEWnc2tGCleK3cHIloMrWUNPpj0nCwARAQAB
                    tB9jYXNwZXJsYWJzIDxpbmZvQGNhc3BlcmxhYnMuaW8+iQJOBBMBCAA4FiEEBgQS
                    aTlbD77YeiTGmAbcrdHLR/IFAlyrstcCGwMFCwkIBwIGFQoJCAsCBBYCAwECHgEC
                    F4AACgkQmAbcrdHLR/JpsQ/+MnLBoB37teIK+5HvWMsIHiQWliz3JBeKTLO+sbz4
                    q+5BgaFJxkgQcb26YDS4mXL0pn+jhNvatl7JX/x5SLotl3NV+0sVVwhanWYlukw0
                    dxq8gW0I9W+9QjXDfP+VwrdF3kiNoL6Wgu4w5ZU5IqFHy3ysotwVX6vR95V4tso/
                    uh5rFqi4ZpxXdNSQVGp5JfTbaG06CbJF0IJ5xTWpkmBzMLqOSwk+GvMzq7DB6Mwo
                    GoUzb4hSbVSaVho5fsZhRyPTXL7Sg51VZVufsdZNyQO/Ww2LWx94Qez7Ws5Vg3me
                    odgRvbv8kFMBBbHgemRMKeq8sXe6ZqQwX7BE82DbLUrlN4MfcN9SyMvmMI3WTNK1
                    03KsgyILSQKNDx5+sn8JYeicwVKfuRV3a6N+Qq+PT/OQyQMO8w09FQd572FU5ENw
                    5np7ToOxaR2MzhBye1QBAKDx1KtQ4kfOFz3CLBQKabhnJJYtRRYWnbpKKhtsohxU
                    cvNAZWaUaAjir6gbwPtvXpprFAwl6VdYOz2D1zIWtp8Q310VfUYZwhZrRRI7leVC
                    tfcYN2pOLOo7Aroq3R2U3voJ17zMZ3uTbGIcmLHC/NDa9QN2Fk1sBFRLeco8iGoB
                    z5BjEKxDYPg5suIpmaWe+cgn+zJkMBiircseoEkFCDWY4V3RCEWZK6vC51WQhwe5
                    vEC5Ag0EXKuy1wEQALxrgT30BoJ6qUMQBmhguRc9x65ugU3OYuqKxmHbBBtGmQBf
                    dDzh3D7luY26qyrFoFLAt3ntMO6ZTa67WrmJGw6Cv/h3nW6r+/0vBUz6OS+eUwjN
                    JMvnxDI0RBmf6Tn6iDCaEXMQyRbiCQTt+kCFVCBng+bFFohi/x7Ent0QgZnyQabc
                    EVWVGYLjYJiXldGOVMMJDbSwKeLO+ZSOGc31JbZ5NRFtjGAPyIcwWKljK3cTHS4Z
                    kUVPtvZaHBUrNnrXlA0dkwODFXnHteXLJlcVM0olVKGFbHnXqnk0VNLkVpUBC7TA
                    wgHI4q047Mx8K+FuL2rvkxeGR8watAjFNqDMgo8ERcYFyOu9COH7d7+C9nCsI5mw
                    zKumhox2RYht5x62HjDS+i3VZMFHVH+bA/WaGbUCTsTAtJPzZuDsGTvRi41U1Ar4
                    pCAK54hvcKBUmb+ZnQxoLEbOy43UqjyDk/zSII61c3Looy+tam1DscvSqW5aCSJ8
                    NC2txSE/g6JJoM6c4zbf9/UWykR3FKbPC89zs8vF6QgKZvSduipS/MfXPfljC+hg
                    0i+HalOqq4z5ZahcsvCSoiUxRyzKROpZFtLn7CQQmsGP4NFeWlU8Wa6NX2BT6Kdx
                    hnWhmpWyX34IEJpT81I3P80R958hI3+n/SvvPlz99NngsrXAgq+dVGHziC45ABEB
                    AAGJAjYEGAEIACAWIQQGBBJpOVsPvth6JMaYBtyt0ctH8gUCXKuy1wIbDAAKCRCY
                    Btyt0ctH8ncGD/9HFMqHai1y9hT+1iJg7SOcftPFYIbLmCmLNctnowMdz3lpQWum
                    0hfOIeH/Bp9AEZ78mJyi9ubm+sH98hrPg62EWZTBMZevGXpwvFdnHEjeM+ECRF1i
                    k6SZTT51MDciGfOggVF81DqYzGPLUfuD3tbSujA5obz2oxsYnIAW080VNzYgKWie
                    ot9A23XD7nvljPPSaPVuYU2ecxtgcwvIrHuMtAZhD914VHN/jCEpG84VatK8KL3/
                    BdtsTjhqYzUiwsl9WsrrlQLWpslyn/asvxCBPrK3aRrdEHFrd+fEwrqRAjGCA+SV
                    2+cHqPdFTLUHxnXxYzSNXhJ+YOUkrMuDAmzHdD5QHFi91gjhiCTgQnqYeYzCD875
                    6Q6O/IGMmkvpBX1k1wi21Sa6Pvf1Iz6sTeTe7YzAQcA4SFE3LQ9FsQio66WETHOz
                    V//6dikSmbj7gbDVCaagEY0SBdQfsVgLa9kOE9WY2CZfVn0Nr9TKldA78x/wybnH
                    XBlkaA5hgiX6neVrx7T43sZLrfdvn6ppuC5ahQ7yK/PdqDBJ6JlTIERAxa/otjcO
                    WiOOK1lVd9OQJ8Jut1FDY2vTtaZ6oUDKw7DHU/nrOLex7PnQsL/ZFfOKPv1Qs7rf
                    HNl7eclBNEGsZAeTSKNSBHcbVC0txMZTjd+s3lj/Ddd0xU5aZYhujK3STg==
                    =c1w/
                    -----END PGP PUBLIC KEY BLOCK-----

            write_files:
            - path: /tmp/custom-init-script.sh
              permissions: 0777
              content: "${CustomInitScript}"
            - path: /tmp/install-casper-node-launcher.sh
              permissions: 0777
              content: |
                #!/bin/bash -x
                CASPER_VERSION=${!1}
                CASPER_NETWORK=${!2}

                sudo -u casper /etc/casper/pull_casper_node_version.sh $CASPER_NETWORK.conf $CASPER_VERSION
                sudo -u casper /etc/casper/config_from_example.sh $CASPER_VERSION

                # Get validator IP
                KNOWN_ADDRESSES=$(sudo -u casper cat /etc/casper/$CASPER_VERSION/config.toml | grep known_addresses)
                KNOWN_VALIDATOR_IPS=$(grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' <<< "$KNOWN_ADDRESSES")
                IFS=' ' read -r KNOWN_VALIDATOR_IP _REST <<< "$KNOWN_VALIDATOR_IPS"

                echo Validator IP $KNOWN_VALIDATOR_IP

                # Get trusted_hash into config.toml
                TRUSTED_HASH=$(curl -s $KNOWN_VALIDATOR_IP:8888/status | jq -r .last_added_block_info.hash | tr -d '\n')
                if [ "$TRUSTED_HASH" != "null" ]; then sudo -u casper sed -i "/trusted_hash =/c\trusted_hash = '$TRUSTED_HASH'" /etc/casper/$CASPER_VERSION/config.toml; fi

                # Generate Key
                sudo -u casper casper-client keygen /etc/casper/validator_keys;

                # Start Node
                logrotate -f /etc/logrotate.d/casper-node;
                sleep 60;
                systemctl start casper-node-launcher;
                systemctl status casper-node-launcher;

            - path: /tmp/install-cloudwatch-agent.sh
              permissions: 0777
              content: |
                #!/bin/bash -x

                wget -q https://s3.amazonaws.com/amazoncloudwatch-agent/debian/amd64/latest/amazon-cloudwatch-agent.deb
                dpkg -i -E ./amazon-cloudwatch-agent.deb
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s

            - path: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
              permissions: 0444
              content: |
                {
                  "agent": {
                    "debug": true
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [{
                          "log_group_name": "${LogGroup}",
                          "file_path": "/var/log/casper/casper-node.log",
                          "log_stream_name": "{instance_id}/var/log/casper/casper-node.log",
                          "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                        },
                        {
                          "log_group_name": "${LogGroup}",
                          "file_path": "/var/log/casper/casper-node.stderr.log",
                          "log_stream_name": "{instance_id}/var/log/casper/casper-node.stderr.log",
                          "timestamp_format": "%Y-%m-%dT%H:%M:%S"
                        }]
                      }
                    }
                  },
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}"
                    },
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "disk": {
                        "measurement": [
                          "disk_used_percent"
                        ]
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      }
                    }
                  }
                }

            runcmd:
            - apt-get -y install python-setuptools
            - wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            - python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
            - /tmp/install-cloudwatch-agent.sh
            - /tmp/custom-init-script.sh
            - /tmp/install-casper-node-launcher.sh 1_0_0 ${CasperNetwork}
            - /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}


  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT5M
    Properties:
      AutoScalingGroupName: !Sub ${Identifier}
      VPCZoneIdentifier: !Ref SubnetIds
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      MixedInstancesPolicy:
        InstancesDistribution: 
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 100
          SpotAllocationStrategy: capacity-optimized
          SpotMaxPrice: !Ref AWS::NoValue
        LaunchTemplate: 
          LaunchTemplateSpecification: 
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides: 
          - InstanceType: !Ref InstanceType
      MetricsCollection:
      - Granularity: 1Minute
        Metrics:
        - GroupMinSize
        - GroupMaxSize
        - GroupDesiredCapacity
        - GroupInServiceInstances
        - GroupPendingInstances
        - GroupStandbyInstances
        - GroupTerminatingInstances
        - GroupTotalInstances
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}
        PropagateAtLaunch: true
      - Key: Owner
        Value: !Ref OwnerName
        PropagateAtLaunch: true
      - Key: ProjectName
        Value: !Ref ProjectName
        PropagateAtLaunch: true
      - Key: Environment
        Value: !Ref Environment
        PropagateAtLaunch: true

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties: 
      DashboardName: !Sub ${Identifier}
      DashboardBody: !Sub |
        {
            "widgets": [
                {
                    "height": 6,
                    "width": 6,
                    "y": 3,
                    "x": 12,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "metrics": [
                            [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "${AutoScalingGroup}" ]
                        ],
                        "region": "${AWS::Region}",
                        "period": 300,
                        "title": "CPU"
                    }
                },
                {
                    "height": 3,
                    "width": 12,
                    "y": 0,
                    "x": 0,
                    "type": "text",
                    "properties": {
                        "markdown": "\n# Casper Node \n&nbsp;\n\nAccess Node: [button:Session Manager](https://console.aws.amazon.com/systems-manager/session-manager/start-session?region=${AWS::Region}#)\n"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 9,
                    "x": 12,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "metrics": [
                            [ "AWS/EC2", "NetworkIn", "AutoScalingGroupName", "${AutoScalingGroup}" ],
                            [ ".", "NetworkOut", ".", "." ]
                        ],
                        "region": "${AWS::Region}",
                        "title": "Network"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 9,
                    "x": 18,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "metrics": [
                            [ "AWS/EC2", "EBSReadBytes", "AutoScalingGroupName", "${AutoScalingGroup}" ],
                            [ ".", "EBSWriteBytes", ".", "." ]
                        ],
                        "region": "${AWS::Region}",
                        "title": "Disk IO"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 3,
                    "x": 18,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "metrics": [
                            [ "CWAgent", "mem_used_percent", "AutoScalingGroupName", "${AutoScalingGroup}" ]
                        ],
                        "region": "${AWS::Region}",
                        "title": "Memory"
                    }
                },
                {
                    "type": "log",
                    "x": 0,
                    "y": 3,
                    "width": 12,
                    "height": 12,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | fields @timestamp, level, @message",
                        "region": "${AWS::Region}",
                        "title": "Logs",
                        "view": "table"
                    }
                },
                {
                    "type": "metric",
                    "x": 12,
                    "y": 0,
                    "width": 12,
                    "height": 3,
                    "properties": {
                        "metrics": [
                            [ "AWS/EC2", "StatusCheckFailed", "AutoScalingGroupName", "${AutoScalingGroup}" ],
                            [ ".", "StatusCheckFailed_System", ".", "." ],
                            [ ".", "StatusCheckFailed_Instance", ".", "." ]
                        ],
                        "view": "singleValue",
                        "region": "${AWS::Region}",
                        "title": "Instance Checks",
                        "period": 300,
                        "stat": "Average"
                    }
                }
            ]
        }

Outputs:

  SecurityGroup:
    Description: Security group of the node
    Value: !Ref SecurityGroup
    
  AutoScalingGroupName:
    Description: Name of the AutoScaling Group    
    Value: !Ref AutoScalingGroup

  DashboardName:
    Description: CloudWatch Dashboard name
    Value: !Ref Dashboard
  
  DashboardUrl:
    Description: CloudWatch Dashboard URL
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${Dashboard}